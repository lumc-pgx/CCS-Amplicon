PLATE = "plate2"
BARCODE = "lbc20"

CCS_BAM = "/exports/humgen/wgallard/pharmacogenomics_pipeline/pugwash/LIMA_2_stage_deflate/{}/preprocessor/CCS/{}.bam".format(PLATE, BARCODE)
SUBREADS_BAM = "/exports/humgen/wgallard/pharmacogenomics_pipeline/pugwash/LIMA_2_stage_deflate/{}/preprocessor/consolidated/{}.bam".format(PLATE, BARCODE)
MIN_READ_LENGTH = 6000
MAX_READ_LENGTH = 7000
MIN_PASSES = 1
MIN_QUAL = 0.98
MAX_HP_LEN = 2
TSNE_ITERS = 5000
TSNE_LR = 50
CLUSTER_SIMILARITY_PERCENTILE = 80
CLUSTER_INFLATION = 1.4
CLUSTER_COVERAGE_LIMIT = 500
CONSENSUS_FRACTION = 0.51
MIN_HAPLOTYPE_MOLECULES = 10

SMRTCMD_PATH = "/usr/local/smrtlink/smrtcmds/bin"
SCRIPT_DIR = srcdir("scripts")
SRC_DIR = srcdir(".")


rule all:
    input: "haplotypes/ccs.filtered.fastq"


rule filter_ccs_bam:
    input: CCS_BAM
    output: "filtered/ccs.filtered.bam"
    message: "filtering CCS bam file"
    shell:
        "bamtools filter -in {input} -out {output} -length '>={MIN_READ_LENGTH}' -length '<={MAX_READ_LENGTH}' "
        "-tag 'np:>={MIN_PASSES}' -tag 'rq:>={MIN_QUAL}'"


rule pb_index:
    input: "{prefix}.bam"
    output: "{prefix}.bam.pbi"
    message: "generating index for filtered CCS bam file"
    shell: "{SMRTCMD_PATH}/pbindex {input}"


rule bam2fasta:
    input:
        bam = "filtered/{prefix}.bam",
        index = "filtered/{prefix}.bam.pbi"
    output: "filtered/{prefix}.fasta"
    message: "converting bam to fasta"
    shell: "{SMRTCMD_PATH}/bam2fasta -o - {input.bam} > {output}"


rule collapse_hp:
    input: "filtered/{prefix}.fasta"
    output: "collapsed/{prefix}.collapse_hp.fasta"
    message: "collapsing homopolymer runs"
    shell: "{SCRIPT_DIR}/collapse_homopolymers.py -s {MAX_HP_LEN} {input} > {output}"


rule distance_matrix:
    input: "collapsed/{prefix}.collapse_hp.fasta"
    output: "clustering/{prefix}.dists.tsv"
    message: "creating distance matrix"
    shell: "{SCRIPT_DIR}/distance_matrix.py {input} > {output}"


rule embed:
    input: "clustering/{prefix}.dists.tsv"
    output:
        embeddings = "clustering/{prefix}.embedded.tsv",
        history = "clustering/{prefix}.embedded.log"
    message: "embedding in two dimensions using tSNE"
    shell: "{SCRIPT_DIR}/embed.py -i {TSNE_ITERS} -lr {TSNE_LR} {input} > {output.embeddings} 2>{output.history}"


rule ccs_info:
    input: "filtered/{prefix}.bam"
    output: "filtered/{prefix}.bam.info"
    message: "generating summary information for CCS sequences"
    shell: "{SCRIPT_DIR}/baminfo.py {input} > {output}"


rule cluster:
    input:
        embeddings = "clustering/{prefix}.embedded.tsv",
        info = "filtered/{prefix}.bam.info"
    output: "clustering/{prefix}.clusters.json"
    message: "identifying clusters"
    shell: "{SCRIPT_DIR}/cluster.py -s {CLUSTER_SIMILARITY_PERCENTILE} -i {CLUSTER_INFLATION} "
           "-c {CLUSTER_COVERAGE_LIMIT} {input.embeddings} {input.info} > {output}"


rule cluster_seqs:
    input:
        seqs = "collapsed/{prefix}.collapse_hp.fasta",
        clusters = "clustering/{prefix}.clusters.json"
    output: dynamic("clustering/{prefix}.cluster{clusterid}.fasta")
    message: "creating per-cluster sequence files"
    shell: "{SCRIPT_DIR}/seqs_from_clusters.py -p clustering/{wildcards.prefix} {input.seqs} {input.clusters}"


rule make_haplotypes:
    input: "clustering/{prefix}.cluster{clusterid}.fasta"
    output: "merge_laa/{prefix}.cluster{clusterid}.fastq"
    message: "running haplotype workflow for cluster {wildcards.clusterid}"
    params: snakefile = srcdir("subworkflow.snake")
    shell: "snakemake -s {params.snakefile} --nolock "
           "--config PREFIX={wildcards.prefix}.cluster{wildcards.clusterid} "
           "CCS_BAM={CCS_BAM} "
           "SUBREADS_BAM={SUBREADS_BAM}"


rule merge_haplotype_clusters:
    input: dynamic("merge_laa/{prefix}.cluster{clusterid}.fastq")
    output: "haplotypes/{prefix}.fastq"
    message: "merging haplotype sequences"
    shell: "cat {input} > {output}"