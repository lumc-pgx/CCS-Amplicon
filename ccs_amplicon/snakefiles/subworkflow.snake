rule all:
    input: "merge_laa/{}.fastq".format(config["PREFIX"])


rule mafft_msa:
    input: "clustering/{prefix}.fasta"
    output: "consensus/{prefix}.msa"
    message: "mafft alignment of cluster sequences"
    shell: "mafft --auto --quiet --thread 1 --adjustdirection {input} > {output}"


rule consensus:
    input: rules.mafft_msa.output
    output: "consensus/{prefix}.consensus.fasta"
    message: "generating cluster consensus sequence"
    shell: "ccs_amplicon.consensus -f {config[CONSENSUS_FRACTION]} "
           "-s {wildcards.prefix}.consensus {input} > {output}"


rule align_to_consensus:
    input:
        consensus = rules.consensus.output,
        reads = "clustering/{prefix}.fasta"
    output:
        sam = "align/{prefix}.aligned.sam",
        bam = "align/{prefix}.aligned.sorted.bam",
        index = "align/{prefix}.aligned.sorted.bam.bai"
    message: "aligning cluster sequences to cluster consensus"
    shell: """
        if [ -s "{input.consensus}" ] && [ -s "{input.reads}" ]
        then
            ngmlr -r {input.consensus} -q {input.reads} --rg-id foo --rg-sm sm --rg-lb lb > {output.sam}
        else
            echo "creating placeholder sam file due to empty input"
            touch {output.sam}
        fi
        samtools sort {output.sam} > {output.bam}
        samtools index {output.bam}
    """


rule pileup:
    input:
        bam = rules.align_to_consensus.output.bam,
        consensus = rules.consensus.output
    output:
        "calls/{prefix}.pileup"
    message: "generating pileup"
    shell: """
        if [ -s "{input.bam}" ] && [ -s "{input.consensus}" ]
        then
            bcftools mpileup -d {config[MAX_PHASING_SEQS]} -f {input.consensus} {input.bam} > {output}
        else
            echo "creating placeholder pileup due to empty input"
            touch {output}
        fi
    """


rule call:
    """
    Call variants
    """
    input: rules.pileup.output
    output: "calls/{prefix}.bcf"
    message: "calling variants"
    shell: """
        if [ -s "{input}" ]
        then
            bcftools call -mv -Ov {input} > {output}
        else
            echo "creating placeholder bcf due to empty input"
            touch {output}
        fi
    """


rule snp_filter:
    """
    Identify high quality SNPs from called variants
    High quality SNPs are SNPs that -
        1) Are not adjacent to indels
        2) Have a QUAL score > some threshold
    """
    input: rules.call.output
    output: "calls/{prefix}.snps.vcf"
    message: "filtering snps"
    shell: """
        if [ -s "{input}" ]
        then
            bcftools filter --SnpGap 1 {input} | bcftools filter -i 'TYPE="snp" & QUAL>{config[MIN_VARIANT_QUAL]}' > {output}
        else
            echo "creating placeholder vcf due to empty input"
            touch {output}
        fi
    """


rule indel_filter:
    """
    Identify high quality indels from called variants
    Indel quality is tricky to assess!
    We choose here to retain indels with QUAL > some threshold, and IMF > 0.2
    Additionally, where multiple indels overlap, retain only one of them.
    """
    input: rules.call.output
    output: "calls/{prefix}.indels.vcf"
    message: "filtering indels"
    shell: """
        if [ -s "{input}" ]
        then
            bcftools filter --IndelGap 1 {input} | bcftools filter -i 'TYPE="indel" & QUAL>{config[MIN_VARIANT_QUAL]} & IMF>0.2' > {output}
        else
            echo "creating placeholder vcf due to empty input"
            touch {output}
        fi
    """


rule vcf_combine:
    """
    Create the vcf containing the variants to be used for phasing.
    If there are heterozygous SNPs, use them.
    Only include indels if no heterozygous SNPs were found.
    """
    input:
        snps = rules.snp_filter.output,
        indels = rules.indel_filter.output
    output: "calls/{prefix}.filtered.vcf"
    message: "combining snps and indels"
    shell: """
        if [ -s "{input.snps}" ] && [ -s "{input.indels}" ]
        then
            if [ $(bcftools filter "{input.snps}" -i 'GT="0/1"' | grep -v '#' | wc -l) -gt 0 ]
            then
                cp {input.snps} {output}
            else
                vcfcombine {input.snps} {input.indels} > {output}
            fi
        else
            echo "creating placeholder vcf due to empty input"
            touch {output}
        fi
    """


rule normalize:
    """
    Normalize the set of variants to be phased
    """
    input:
        vcf = rules.vcf_combine.output,
        ref = rules.consensus.output
    output: "calls/{prefix}.norm.vcf"
    message: "normalizing variants"
    shell:"""
        if [ -s "{input.vcf}" ]
        then
            vt normalize {input.vcf} -r {input.ref} > {output}
        else
            echo "creating placeholder vcf due to empty input"
            touch {output}
        fi
    """


rule phase:
    """
    Identify phase sets using whatshap.
    Only phase on indels if no heterozygous SNPs are present in the input vcf.
    """
    input:
        vcf = rules.normalize.output,
        bam = rules.align_to_consensus.output.bam,
        ref = rules.consensus.output
    output: "phasing/{prefix}.phased.vcf"
    message: "phasing cluster"
    shell: """
        if [ -s "{input.vcf}" ] && [ -s "{input.bam}" ] && [ $(samtools view -S -F0x4 "{input.bam}" | wc -l) -gt 0 ]
        then
            if [ $(bcftools query -f '%TYPE\n' "{input.vcf}" | grep 'INDEL' | wc -l) -gt 0 ]
            then
                whatshap phase --indels --distrust-genotypes --reference {input.ref} {input.vcf} {input.bam} > {output}
            else
                whatshap phase --distrust-genotypes --reference {input.ref} {input.vcf} {input.bam} > {output}
            fi
        else
            echo "creating placeholder phased vcf due to empty input"
            touch {output}
        fi
    """


rule sanitize:
    """
    Ensure that samples containing only a single, heterozygous SNP are assigned a phase
    """
    input: rules.phase.output
    output:
        zip = "phasing/{prefix}.phased.sanitized.vcf.gz",
        index = "phasing/{prefix}.phased.sanitized.vcf.gz.tbi"
    message: "sanitizing phased vcf"
    shell: """
        if [ -s "{input}" ]
        then
            ccs_amplicon.sanitize_phase {input} | bgzip -c > {output.zip}
            tabix {output.zip}
        else
            echo "creating placeholder bcf due to empty input"
            touch {output.zip}
            touch {output.index}
        fi
    """


rule haplotag:
    input:
        vcf = rules.sanitize.output.zip,
        bam = rules.align_to_consensus.output.bam,
        ref = rules.consensus.output
    output:
        bam = "phasing/{prefix}.tagged.bam",
        index = "phasing/{prefix}.tagged.bam.bai"
    message: "tagging cluster reads"
    shell: """
        if [ -s "{input.vcf}" ] && [ -s "{input.bam}" ]
        then
            whatshap haplotag --reference {input.ref} -o {output.bam} {input.vcf} {input.bam}
            samtools index {output.bam}
        else
            echo "creating placeholder tagged bam due to empty input"
            touch {output.bam}
            touch {output.index}
        fi
    """


rule whitelist:
    input: rules.haplotag.output.bam
    output: dynamic("laa/{prefix}.haplotype{haplotypeid}.whitelist")
    message: "generating whitelists"
    shell: "ccs_amplicon.whitelist -p laa/{wildcards.prefix} -m {config[MIN_HAPLOTYPE_MOLECULES]} {input}"


rule laa_consensus:
    input:
        subreads = config["SUBREADS_BAM"],
        whitelist = rules.whitelist.output
    output:
        "laa/{prefix}.haplotype{haplotypeid}.fastq"
    params:
        junk = "laa/{prefix}.haplotype{haplotypeid}.junk.fastq",
        report_file = "laa/{prefix}.haplotype{haplotypeid}.report.csv",
        input_report = "laa/{prefix}.haplotype{haplotypeid}.input_report.csv",
        locus_report = "laa/{prefix}.haplotype{haplotypeid}.locus_report.csv",
        whitelist_report = "laa/{prefix}.haplotype{haplotypeid}.whitelist_report.csv"
    message: "generating haplotype consensus"
    shell: """
        if [ -s "{input.whitelist}" ] && [ -s "{input.subreads}" ]
        then
            laa -n 1 --ignoreBc --noClustering --noPhasing \
            --resultFile {output} \
            --junkFile {params.junk} \
            --reportFile {params.report_file} \
            --inputReportFile {params.input_report} \
            --subreadsReportPrefix laa/{wildcards.prefix}.haplotype{wildcards.haplotypeid}.subreads \
            --whitelistReportFile {params.whitelist_report} \
            --locusReportFile {params.locus_report} \
            --whitelist {input.whitelist} {input.subreads}
        else
            echo "creating placeholder outputs due to empty input"
            for f in {output}
                do touch $f
            done
        fi
    """



rule modify_laa_id:
    input: rules.laa_consensus.output
    output: "relabel_laa/{prefix}.haplotype{haplotypeid}.renamed.fastq"
    message: "updating haplotype sequence name"
    shell: "ccs_amplicon.label -p {wildcards.prefix}.haplotype{wildcards.haplotypeid} {input} > {output}"


rule merge_laa:
    input: dynamic("relabel_laa/{prefix}.haplotype{haplotypeid}.renamed.fastq")
    output: "merge_laa/{prefix}.fastq"
    message: "merging cluster haplotype sequences"
    shell: "cat {input} > {output}"
