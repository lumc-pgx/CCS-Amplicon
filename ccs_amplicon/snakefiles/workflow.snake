SUBWORKFLOW_PROFILE = config.get("PROFILE", "")
if SUBWORKFLOW_PROFILE != "":
    SUBWORKFLOW_PROFILE = "--profile " + SUBWORKFLOW_PROFILE


rule all:
    input:
        "haplotypes/{}.fastq".format(config["PREFIX"]),
        "clustering/{}.clustering.html".format(config["PREFIX"])


rule filter_ccs_bam:
    input: config["CCS_BAM"]
    output: "filtered/{prefix}.bam",
    message: "filtering CCS bam file"
    shell:
        "bamtools filter -in {input} -out {output} "
        "-length '>={config[MIN_READ_LENGTH]}' "
        "-length '<={config[MAX_READ_LENGTH]}' "
        "-tag 'np:>={config[MIN_PASSES]}' -tag 'rq:>={config[MIN_QUAL]}'"


rule pbindex:
    input: rules.filter_ccs_bam.output
    output: "filtered/{prefix}.bam.pbi"
    message: "generating pacbio index for bam"
    shell: "pbindex {input}"


rule bam2fasta:
    input:
        bam = rules.filter_ccs_bam.output,
        index = rules.pbindex.output
    output: "filtered/{prefix}.fasta"
    message: "converting bam to fasta"
    shell: "bam2fasta -o filtered/{wildcards.prefix} -u {input.bam}"


rule collapse_hp:
    input: rules.bam2fasta.output
    output: "collapsed/{prefix}.collapse_hp.fasta"
    message: "collapsing homopolymer runs"
    shell: "ccs_amplicon.collapse -s {config[MAX_HP_LEN]} {input} > {output}"


rule distance_matrix:
    input: rules.collapse_hp.output
    output: "clustering/{prefix}.dists.tsv"
    message: "creating distance matrix"
    shell: "ccs_amplicon.distance {input} > {output}"


rule embed:
    input: rules.distance_matrix.output
    output:
        embeddings = "clustering/{prefix}.embedded.tsv",
        history = "clustering/{prefix}.embedded.log"
    message: "embedding in two dimensions using tSNE"
    shell: "ccs_amplicon.embed -i {config[TSNE_ITERS]} -lr {config[TSNE_LR]} "
           "{input} > {output.embeddings} 2>{output.history}"


rule ccs_info:
    input: rules.filter_ccs_bam.output
    output: "filtered/{prefix}.bam.info"
    message: "generating summary information for CCS sequences"
    shell: "ccs_amplicon.baminfo {input} > {output}"


rule cluster:
    input:
        embeddings = rules.embed.output.embeddings,
        info = rules.ccs_info.output
    output: "clustering/{prefix}.clusters.json"
    message: "identifying clusters"
    shell: "export OMP_NUM_THREADS=1 && ccs_amplicon.clusters -s {config[CLUSTER_SIMILARITY_PERCENTILE]} "
           "-i {config[CLUSTER_INFLATION]} -c {config[CLUSTER_COVERAGE_LIMIT]} "
           "{input.embeddings} {input.info} > {output}"


rule cluster_report:
    input:
        embeddings = rules.embed.output.embeddings,
        clusters = rules.cluster.output,
        info = rules.ccs_info.output
    output:
        "clustering/{prefix}.clustering.html"
    message:
        "visualizing clusters"
    shell: "ccs_amplicon.clusterplot {input.clusters} {input.embeddings} {input.info} {output}"


rule cluster_seqs:
    input:
        seqs = rules.collapse_hp.output,
        clusters = rules.cluster.output
    output: dynamic("clustering/{prefix}.cluster{clusterid}.fasta")
    message: "creating per-cluster sequence files"
    shell: "ccs_amplicon.seqs_from_clusters -p clustering/{wildcards.prefix} {input.seqs} {input.clusters}"


rule make_haplotypes:
    input: rules.cluster_seqs.output
    output: "merge_laa/{prefix}.cluster{clusterid}.fastq"
    message: "running haplotype workflow for cluster {wildcards.clusterid}"
    params: snakefile = srcdir("subworkflow.snake")
    shell: "snakemake -s {params.snakefile} --nolock "
           "{SUBWORKFLOW_PROFILE} "
           "--config PREFIX={wildcards.prefix}.cluster{wildcards.clusterid} "
           "CCS_BAM={config[CCS_BAM]} "
           "SUBREADS_BAM={config[SUBREADS_BAM]} "
           "CONSENSUS_FRACTION={config[CONSENSUS_FRACTION]} "
           "MIN_HAPLOTYPE_MOLECULES={config[MIN_HAPLOTYPE_MOLECULES]} "
           "MIN_VARIANT_QUAL={config[MIN_VARIANT_QUAL]}"


rule merge_haplotype_clusters:
    input: dynamic("merge_laa/{prefix}.cluster{clusterid}.fastq")
    output: "haplotypes/{prefix}.fastq"
    message: "merging haplotype sequences"
    shell: "cat {input} > {output}"
