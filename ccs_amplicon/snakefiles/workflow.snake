SUBWORKFLOW_PROFILE = config.get("PROFILE", "")
if SUBWORKFLOW_PROFILE != "":
    SUBWORKFLOW_PROFILE = "--profile " + SUBWORKFLOW_PROFILE


rule all:
    input:
        "haplotypes/{}.chimera_scan.tsv".format(config["PREFIX"]),
        "phasing/{}.html".format(config["PREFIX"])
       

rule find_primers:
    """
    Search the CCS sequences for the forward and reverse primers.
    Tag the records for filtering downstream.
    """
    input: config["CCS_BAM"]
    output: "filtered/{prefix}.primed.bam"
    message: "finding sequences with primers"
    params:
        fwd = "-f {}".format(config["FORWARD_PRIMER"]) if config["FORWARD_PRIMER"] else "",
        rev = "-r {}".format(config["REVERSE_PRIMER"]) if config["REVERSE_PRIMER"] else ""
    shell:
        "ccs_amplicon.strip_primers "
        "{params.fwd} "
        "{params.rev} "
        "-d {config[MAX_PRIMER_DIST]} "
        "{input} {output}"


def primer_filter_string():
    """construct the regular expression for filtering primers"""
    
    # both forward (fwd) and reverse (rev) primers are expected
    # allow sequences which start with fwd and end with rev'
    # or start with rev and end with fwd'
    if config["FORWARD_PRIMER"] and config["REVERSE_PRIMER"]:
        return "^@|pf:B:[Cc],1,-2|pf:B:[Cc],2,-1"
    
    # only fwd provided
    # allow sequences which start with fwd or end with fwd'
    if config["FORWARD_PRIMER"]:
        return "^@|pf:B:[Cc],1,0|pf:B:[Cc],0,-1"
    
    # only rev provided
    # allow sequences which start with rev or end with rev'
    if config["REVERSE_PRIMER"]:
        return "^@|pf:B:[Cc],2,0|pf:B:[Cc],0,-2"
    
    # no primers provided, allow 'null primer'
    return "^@|pf:B:[Cc],0,0"


rule filter_ccs_bam:
    """
    Filter the CCS sequences to remove junk.
    Retain CCS sequences which pass the following thresholds:
        MIN_READ_LENGTH <= length <= MAX_READ_LENGTH
        number of passes (np) >= MIN_PASSES
        read quality (rq) >= MIN_QUAL
        forward and reverse primer present with the correct orientation        
    """
    input: rules.find_primers.output
    output: "filtered/{prefix}.bam",
    message: "filtering CCS bam file"
    params: primer_string = primer_filter_string()
    shell:
        "bamtools filter -in {input} -length '>={config[MIN_READ_LENGTH]}' | "
        "bamtools filter -length '<={config[MAX_READ_LENGTH]}' | "
        "bamtools filter -tag 'np:>={config[MIN_PASSES]}' | "
        "bamtools filter -tag 'rq:>={config[MIN_QUAL]}' | "
        "samtools view -h - | egrep '{params.primer_string}' | "
        "samtools view -bS - > {output}"


rule pbindex:
    """
    Generate a pacbio index for the filtered CCS bam
    """
    input: rules.filter_ccs_bam.output
    output: "filtered/{prefix}.bam.pbi"
    message: "generating pacbio index for bam"
    shell: "pbindex {input}"


rule bam2fasta:
    """
    Convert to fasta
    """
    input:
        bam = rules.filter_ccs_bam.output,
        index = rules.pbindex.output
    output: "filtered/{prefix}.fasta"
    message: "converting bam to fasta"
    shell: "bam2fasta -o filtered/{wildcards.prefix} -u {input.bam}"


rule trim_fasta:
    """
    Remove TRIM_ENDS number of nucleotides from the start and end of
    each sequence
    """
    input: rules.bam2fasta.output
    output: "filtered/{prefix}.trimmed.fasta"
    message: "trimming sequence ends"
    shell: "ccs_amplicon.trim_fasta -n {config[TRIM_ENDS]} {input} > {output}"


rule collapse_hp:
    """
    Collapse homopolymer runs longer than MAX_HP_LEN to be exactly MAX_HP_LEN.
    e.g.
        MAX_HP_LEN=2
        CTGAAAAAAGGC => CTGAAGGC
    """
    input: rules.trim_fasta.output
    output: "collapsed/{prefix}.collapse_hp.fasta"
    message: "collapsing homopolymer runs"
    shell: "ccs_amplicon.collapse -s {config[MAX_HP_LEN]} {input} > {output}"


rule distance_matrix:
    """
    Generate a distance matrix from the all-pairs alignment of the 
    input sequences.
    """
    input: rules.collapse_hp.output
    output: "clustering/{prefix}.dists.tsv"
    message: "creating distance matrix"
    shell: "ccs_amplicon.distance {input} > {output}"


rule embed:
    """
    Use t-SNE to generate an 2D embedding of the distance matrix
    """
    input: rules.distance_matrix.output
    output:
        embeddings = "clustering/{prefix}.embedded.tsv",
        history = "clustering/{prefix}.embedded.log"
    message: "embedding in two dimensions using tSNE"
    shell: "ccs_amplicon.embed -i {config[TSNE_ITERS]} -lr {config[TSNE_LR]} "
           "{input} > {output.embeddings} 2>{output.history}"


rule ccs_info:
    """
    Summarize some properties of the filtered CCS sequences
    """
    input: rules.filter_ccs_bam.output
    output: "filtered/{prefix}.bam.info"
    message: "generating summary information for CCS sequences"
    shell: "ccs_amplicon.baminfo {input} > {output}"


rule cluster:
    """
    Identify clusters within the 2D embedded sequences.
    """
    input:
        embeddings = rules.embed.output.embeddings,
        info = rules.ccs_info.output
    output: "clustering/{prefix}.clusters.json"
    message: "identifying clusters"
    shell: "export OMP_NUM_THREADS=1 && ccs_amplicon.clusters -s {config[CLUSTER_SIMILARITY_PERCENTILE]} "
           "-i {config[CLUSTER_INFLATION]} "
           "{input.embeddings} {input.info} > {output}"

rule filter_clusters:
    """
    Filter the clusters to remove noise and keep the data manageable.
    Clusters containing less than CLUSTER_SIZE_THRESHOLD sequences are discarded.
    Clusters containing more than MAX_CLUSTER_SIZE sequences are downsampled
    to MAX_CLUSTER_SIZE.
    """
    input:
        clusters = rules.cluster.output,
        info = rules.ccs_info.output
    output: "clustering/{prefix}.clusters.filtered.json"
    message: "filtering clusters"
    shell:
        "ccs_amplicon.filter_clusters -i {config[CLUSTER_SIZE_THRESHOLD]} -m {config[MAX_CLUSTER_SIZE]} "
        "{input.clusters} {input.info} > {output}"


rule cluster_seqs:
    """
    Create a fasta file containing the sequences for each cluster.
    """
    input:
        seqs = rules.collapse_hp.output,
        clusters = rules.filter_clusters.output
    output: dynamic("clustering/{prefix}.cluster{clusterid}.fasta")
    message: "creating per-cluster sequence files"
    shell: "ccs_amplicon.seqs_from_clusters -p clustering/{wildcards.prefix} {input.seqs} {input.clusters}"


rule make_haplotypes:
    """
    Phase the sequences for each cluster and generate allele sequences.
    
    NOTE
    Because the number of clusters is not known at invocation time, the inputs
    to this rule are dynamic.
    Some of the subsequent steps also generate a number of output files
    which is not known prior to invocation. 
    The result of this is that we have dynamic outputs which generate more
    dynamic outputs. Snakemake says no.
    To solve this situation, the phasing is performed in a separate,
    isolated workflow.
    """
    input: rules.cluster_seqs.output
    output:
        alleles = "merge_laa/{prefix}.cluster{clusterid}.fastq",
        tagged_bams = "phasing/{prefix}.cluster{clusterid}.tagged.bam"
    message: "running haplotype workflow for cluster {wildcards.clusterid}"
    params: snakefile = srcdir("subworkflow.snake")
    shell: "snakemake -s {params.snakefile} --rerun-incomplete --nolock "
           "{SUBWORKFLOW_PROFILE} "
           "--config PREFIX={wildcards.prefix}.cluster{wildcards.clusterid} "
           "CCS_BAM={config[CCS_BAM]} "
           "SUBREADS_BAM={config[SUBREADS_BAM]} "
           "CONSENSUS_FRACTION={config[CONSENSUS_FRACTION]} "
           "MIN_HAPLOTYPE_MOLECULES={config[MIN_HAPLOTYPE_MOLECULES]} "
           "MIN_VARIANT_QUAL={config[MIN_VARIANT_QUAL]} "
           "MAX_PHASING_SEQS={config[MAX_PHASING_SEQS]} "
           "MAKE_HAPLOTYPE_SEQS={config[MAKE_HAPLOTYPE_SEQS]}"


rule merge_haplotype_clusters:
    """
    The haplotyping workflow generates one fastq of allele sequences per cluster -
    merge these together into a single file.
    """
    input: dynamic("merge_laa/{prefix}.cluster{clusterid}.fastq")
    output: "haplotypes/{prefix}.fastq"
    message: "merging haplotype sequences"
    shell: "cat {input} > {output}"


rule summarize_phasing:
    """
    Generate some summary information about the phasing
    """
    input:
        tagged_bams = dynamic("phasing/{prefix}.cluster{clusterid}.tagged.bam"),
        info = rules.ccs_info.output,
        clusters = rules.cluster.output
    output: "phasing/{prefix}.phasing.tsv"
    message: "summarizing phasing"
    shell: "ccs_amplicon.summarize_phasing {input.info} {input.clusters} {input.tagged_bams} > {output}"


rule view_clustering:
    """
    Make some pretty pictures from the clustering and phasing
    """
    input:
        embeddings = rules.embed.output.embeddings,
        info = rules.summarize_phasing.output
    output:
        "phasing/{prefix}.html"
    message:
        "visualizing phased clusters"
    shell: "ccs_amplicon.clusterplot -t {wildcards.prefix} "
           "{input.embeddings} {input.info} {output}"


rule haplotype_fasta:
    """
    Convert fasta of allele sequences to fastq
    """
    input: rules.merge_haplotype_clusters.output
    output: "haplotypes/{prefix}.fasta"
    message: "converting haplotype fastq to fasta"
    shell: "ccs_amplicon.fq2fa {input} > {output}"


rule chimeras:
    """
    Try to identify sequences which appear to be chimeric
    """
    input:
        alleles = rules.haplotype_fasta.output,
        info = rules.summarize_phasing.output
    output:
        "haplotypes/{prefix}.chimera_scan.tsv"
    message:
        "looking for chimeras"
    shell: "ccs_amplicon.tag_chimeras {input.alleles} {input.info} > {output}"
